package com.company.api.service;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.company.api.bean.EmployeeBean;
import com.company.api.dao.EmployeeDao;
import com.company.api.entity.Employee;
import com.company.api.util.StringUtil;

@Service
public class EmployeeService {
	
	@Autowired
    private EmployeeDao employeeDao;
	@Autowired
    private StringUtil stringUtil;
	
	public void save(EmployeeBean employeeBean) {
		Date date = new Date();
		Employee entity = new Employee();
        entity.setName(employeeBean.getName());
        entity.setEmployee_id(employeeBean.getEmployeeId());
        entity.setDepartment_id(employeeBean.getDepartmentId());
        entity.setSex(employeeBean.getSex());
        entity.setPhone(employeeBean.getPhone());
        entity.setAddress(employeeBean.getAddress());
        entity.setAge(employeeBean.getAge());
        entity.setInsert_date(date);
        entity.setUpdate_date(date);
        employeeDao.save(entity);
    }
    
    public EmployeeBean get(EmployeeBean employeeBean) {
    	Specification<Employee> specification = new Specification<Employee>() {
            public Predicate toPredicate(Root<Employee> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                List<Predicate> predicates = new ArrayList<Predicate>();
                if (employeeBean.getName() != null && !"".equals(employeeBean.getName())) {
                    predicates.add(cb.equal(root.<String>get("name"), employeeBean.getName()));
                }
                return cb.and(predicates.toArray(new Predicate[predicates.size()]));
            }
        };
        List<Employee> employeeList = employeeDao.findAll(specification);
        List<EmployeeBean> employeeBeanList = new ArrayList<EmployeeBean>();
        for (Employee employee : employeeList) {
        	EmployeeBean EmployeeBean = new EmployeeBean();
        	employeeList.add(employeeBean.copy(employee));
        }
    	
    	
    	Employee entity = employeeDao.findById(id).orElse(new Employee());
    	EmployeeBean returnEmployeeBean = new EmployeeBean();
    	returnEmployeeBean.setId(entity.getId());
    	returnEmployeeBean.setName(entity.getName());
    	returnEmployeeBean.setAddress(entity.getAddress());
        return returnEmployeeBean;
    }

    public void delete(long id) {
    	employeeDao.deleteById(id);
    }
    
    public void update(EmployeeBean employeeBean) {
    	Date date = new Date();
    	Employee entity = employeeDao.findById(employeeBean.getId()).get();
    	entity.setName(stringUtil.isNotEmpty(employeeBean.getName())?employeeBean.getName():entity.getName());
        entity.setEmployee_id(stringUtil.isNotEmpty(employeeBean.getEmployeeId())?employeeBean.getEmployeeId():entity.getEmployee_id());
        entity.setDepartment_id(stringUtil.isNotEmpty(employeeBean.getDepartmentId())?employeeBean.getDepartmentId():entity.getDepartment_id());
        entity.setSex(stringUtil.isNotEmpty(employeeBean.getSex())?employeeBean.getSex():entity.getSex());
        entity.setPhone(stringUtil.isNotEmpty(employeeBean.getPhone())?employeeBean.getPhone():entity.getPhone());
        entity.setAddress(stringUtil.isNotEmpty(employeeBean.getAddress())?employeeBean.getAddress():entity.getAddress());
        entity.setAge(employeeBean.getAge()!=null?employeeBean.getAge():entity.getAge());
        entity.setInsert_date(entity.getInsert_date());
        entity.setUpdate_date(date);
    	employeeDao.save(entity);
    }
}
